package me.travja.performances.api.models;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonView;
import lombok.Data;
import me.travja.performances.api.Util;
import me.travja.performances.api.views.PerformanceView;
import me.travja.performances.api.views.PersonView;

import java.util.Map;
import java.util.Objects;
import java.util.UUID;

@Data
@DynamoDBDocument
@DynamoDBTable(tableName = "Person")
@JsonView({PersonView.class, PerformanceView.class})
public class Person {

    @JsonView(PerformanceView.class)
    @DynamoDBAttribute(attributeName = "name")
    private String name;
    @DynamoDBAutoGeneratedKey
    @JsonView(PerformanceView.class)
    @DynamoDBHashKey(attributeName = "id")
//    @Setter(AccessLevel.PRIVATE)
    private UUID   id;
    @JsonView(PerformanceView.class)
    @DynamoDBAttribute(attributeName = "email")
    private String email = "";
    @DynamoDBAttribute(attributeName = "phone")
    private String phone = "";
    @JsonIgnore
    @DynamoDBAttribute(attributeName = "password")
    private String password;
    @DynamoDBAttribute(attributeName = "type")
    private String type;

    public Person() {
        this("John Doe", "example@example.com", "", "password");
    }

    public Person(String name, String email, String phone, String password) {
        this.name = name;
        this.email = email;
        this.phone = phone;
        this.password = Util.hash(password);
        this.type = this.getClass().getSimpleName();
    }

    protected Person(UUID id, String name, String email, String phone, String password) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.phone = phone;
        this.password = password;
        this.type = this.getClass().getSimpleName();
    }

    public static Person deserialize(Map<String, AttributeValue> data) {
        String name     = data.get("name").getS();
        String email    = data.get("email").getS();
        String phone    = data.get("phone").getS();
        String password = data.get("password").getS();
        UUID   id       = UUID.fromString(data.get("id").getS());

        String type = data.get("type").getS();

        if (type.equals("Performer")) {
//            List<Map<String, Object>> current  = data.get("currentPerformances");
//            List<Map<String, Object>> previous = item.getList("pastPerformances");

            return new Performer(id, name, email, phone, password);
        } else if (type.equals("Director"))
            return new Director(id, name, email, phone, password);
        else if (type.equalsIgnoreCase("CastingDirector"))
            return new CastingDirector(id, name, email, phone, password);
        else
            return new Performer(id, name, email, phone, password);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, type);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Person)) return false;
        Person person = (Person) o;
        return id.equals(person.id) && type.equals(person.type);
    }
}
